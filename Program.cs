using System;
using System.IO;
using System.Threading.Tasks;

// Network I\O
using System.Net.Http;

// Json
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;


// Tools NuGet Package Manager Console : 
/* 
 *  Install-Package Microsoft.AspNet.WebApi.Client
 * 
 *  Install-Package NewtonSoft.Json
 */

namespace HttpGetJsonParsing
{
	/*
	*open API provided by the NYTimes.
	* full list of books
	* *http://developer.nytimes.com/
	* *https://api.nytimes.com/svc/books/v3/lists/overview.json?api-key=<your-api-key>
	* */

	class Program
	{
		// add static HttpClient property to the Program class
		static HttpClient client = new HttpClient();

		// nyApi is the url for NYTimes API
		public static String nyApi = "https://api.nytimes.com/svc/books/v3/";

		// location path to get the types of list of books,
		public static String nyListType = "lists/names.json";

		// location path to get the list of books sorted by list name
		// the parameter <encoded-name> for types of books is used to sort the lists
		public static String nyList = "lists.json";

		// myApiKey is a parameter to be used for dev/test purpose
		public static String myApiKey = "api-key=02e195f687414c238cfc492dd6cef131";



		// Response is a string build from Json received
		public static string Response = "";

		// Display Response in the console
		static void ShowResponse(String Answer)
		{
			if (string.IsNullOrEmpty(Answer))
			{
				throw new ArgumentException("error message generated by ", nameof(Answer));
			}
			else
			{
				Console.WriteLine(Answer);
			}
		}
		//------------------------------GET json from an url & READ it to a string ----------------------
		static async Task<String> GetResponseAsync(string path)
		{
			String jsonReceived = "";
			// GET
			// If the status code in the response is a success code, the response body contains the JSON representation of a product.
			HttpResponseMessage response = await client.GetAsync(path);
			// READ
			// HttpClient does not throw an exception when the HTTP response contains an error code.
			// Instead, the IsSuccessStatusCode property is false if the status is an error code.
			if (response.IsSuccessStatusCode)
			{
				jsonReceived = await response.Content.ReadAsStringAsync();
				return jsonReceived;
			}
			else
			{
				return null;
			}
		}

		// ------------------------from a string of Json to Object
		private static T DeSerializedJsonData<T>(string json_data) where T : new()
		{

			// if string with JSON data is not empty, deserialize it to class and return its instance 
			if (!string.IsNullOrEmpty(json_data))
				{return  JsonConvert.DeserializeObject<T>(json_data) ; }
			else { throw new ArgumentNullException(nameof (DeSerializedJsonData)) ; }
			
		}


		//----------------------------MAIN-------------------------
		static void Main(string[] args)
		{
			Console.WriteLine("Data provided by The New York Times, for developement purpose only");
			Console.WriteLine("Prior written consent from The New York Times is required to use Times data without attribution.");
			RunAsync().Wait();
		}

		// network done in background thread
		static async Task RunAsync()
		{
		
			/** hard coded demo in console ;
			*  (1)  get the list of type of books
			 * (2) select one type
			 * (3) get the list of books sort on that type
			* (4) display the result
			**/
			try
			{
				String answer = "";
                // Step 1: list of types of books
				String url_type_list = nyApi + nyListType + "?" +myApiKey;
				Console.WriteLine("");
				Console.WriteLine(" find the different types of Books");
				Console.ReadLine();

				answer = await GetResponseAsync(url_type_list);
				
				// get inside answer to select the type of books list----------------------------			
				JObject o_type = new JObject();
				o_type = JObject.Parse(answer);
				string status_type = (string)o_type["status"];

				if (status_type.Equals("OK"))
				{
					int nbResults_type = (int)o_type["num_results"];

					//// Type extraction-------------------------------------------
					JsonTextReader reader_type = new JsonTextReader(new StringReader(answer));
					int i = 0;
					string[] listOfType = new string[nbResults_type];
					while (reader_type.Read())
					{
						if (reader_type.Value != null)
						{
							if ((reader_type.Value.Equals("list_name_encoded")))
							{
								listOfType[i] = reader_type.ReadAsString();
								//---
								Console.WriteLine(listOfType[i]);
								i++;

							}

						}

					}
				;
				}

				//Step 2: choose a type
				Console.WriteLine(" enter a type of book ");
				String type  = Console.ReadLine();

				// Step 3: get the list of books sort by that type
				String url_list = nyApi + nyList + "?" + myApiKey + "&" +  "list=" + type;

				answer = await GetResponseAsync(url_list);

				// get inside	to extract books-------------------------------------------			
				JObject o = new JObject();
				o = JObject.Parse(answer);

				string status = (string)o["status"];
	
				if (status.Equals("OK"))
				{
					int nbResults = (int)o["num_results"];
					Console.WriteLine(nbResults+" Books found");

					//// book extraction-------------------------------------------
					JsonTextReader reader = new JsonTextReader(new StringReader(answer));
					int i = 0;
					string[] listOfBook = new string[nbResults];
					while (reader.Read())
					{
						if (reader.Value != null)
						{
							if ((reader.Value.Equals("title")))
							{
								listOfBook[i] = reader.ReadAsString();
								//---
								Console.WriteLine(listOfBook[i]);
								i++;

							}

						}

					}
				;
				}
				// for demo purpose onlywith console, stop before quiting
				Console.ReadLine();

				}
			catch (Exception e)
			{
				Console.WriteLine(e.Message);
				Console.ReadLine();
			}

			



		}
	}
}
